
plugins {
  id "java"
  id "war"
  id "com.google.protobuf" version "0.8.5" apply false
  id "com.bmuschko.docker-remote-api" version "3.2.4" apply false
}



import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

subprojects {
  version = '0.1.0'

  repositories {
    mavenCentral()
  }

  apply plugin: 'java'
  apply plugin: 'groovy'

  dependencies {
    compileOnly group: 'javax', name: 'javaee-api', version: '8.0'
    compileOnly group: 'org.eclipse.persistence', name: 'eclipselink', version: '2.7.1'
    compile group: 'com.google.auto.value', name: 'auto-value-annotations', version: '1.6'
    annotationProcessor group: 'com.google.auto.value', name: 'auto-value', version: '1.6'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.5.1'
    compile group: 'com.googlecode.protobuf-java-format', name: 'protobuf-java-format', version: '1.4'
    compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.5'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'



    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.13'
    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.1-groovy-2.4'
  }

  compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
  }
}



project(':jbikes') {

  apply plugin: "com.google.protobuf"
  apply plugin: 'war'
  apply plugin: 'com.bmuschko.docker-remote-api'

  sourceSets.main.java.srcDirs += 'build/generated/source/proto/main/java'

  protobuf {
    // Configure the protoc executable
    protoc {
      // Download from repositories
      artifact = 'com.google.protobuf:protoc:3.5.1'
    }
  }


  def libertyDockerFolder = "$project.buildDir/docker/openliberty"

  // Copy all necessary files to the Docker build-context directory
  task prepareDocker() {
    copy {
      from war.archivePath.toString()
      from project.projectDir.toString() + "/server"
      into "$libertyDockerFolder"
      rename { fileName ->
        fileName.replace(war.archiveName, "bikes.war")
      }
    }
    copy {
      from project.projectDir.toString() + "/../derbyLib/"
      into "$libertyDockerFolder/derbyLib"
    }
  }

  task createDockerfile(type: Dockerfile) {
    dependsOn prepareDocker
    destFile = project.file("$libertyDockerFolder/Dockerfile")
    from 'openliberty/open-liberty:latest'
    environmentVariable('DERBY_DB_LOCATION', '/tmp/jbikes-derby.db')
    addFile('server.xml', '/config/')
    addFile('bikes.war', '/config/apps')
    addFile('derbyLib', '/config/derbyLib')
    exposePort(8080)
  }

  task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag = 'languagepit/javaee-bikes:openliberty'
  }
}

project(':jwife') {

  apply plugin: "com.google.protobuf"
  apply plugin: 'war'
  apply plugin: 'com.bmuschko.docker-remote-api'

  sourceSets.main.java.srcDirs += 'build/generated/source/proto/main/java'

  protobuf {
    // Configure the protoc executable
    protoc {
      // Download from repositories
      artifact = 'com.google.protobuf:protoc:3.5.1'
    }
  }


  def libertyDockerFolder = "$project.buildDir/docker/openliberty"

  // Copy all necessary files to the Docker build-context directory
  task prepareDocker() {
    copy {
      from war.archivePath.toString()
      from project.projectDir.toString() + "/server"
      into "$libertyDockerFolder"
      rename { fileName ->
        fileName.replace(war.archiveName, "wife.war")
      }
    }
    copy {
      from project.projectDir.toString() + "/../derbyLib/"
      into "$libertyDockerFolder/derbyLib"
    }
  }

  task createDockerfile(type: Dockerfile) {
    dependsOn prepareDocker
    destFile = project.file("$libertyDockerFolder/Dockerfile")
    from 'openliberty/open-liberty:latest'
    environmentVariable('DERBY_DB_LOCATION', '/tmp/jwife-derby.db')
    addFile('server.xml', '/config/')
    addFile('wife.war', '/config/apps')
    addFile('derbyLib', '/config/derbyLib')
    exposePort(8080)
  }

  task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag = 'languagepit/javaee-wife:openliberty'
  }
}



