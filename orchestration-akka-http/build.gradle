buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.github.rholder:gradle-one-jar:1.0.4'
  }
}

plugins {
  id "scala"
  id "com.bmuschko.docker-remote-api" version "3.2.4"
}

apply plugin: "gradle-one-jar"

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

ext {
  versionScala = '2.12.5'
  versionScalaTest = '3.0.5'
  versionScalaLogging = '3.5.0'
  versionAkka = '2.5.13'
  versionAkkaHttp = '10.1.2'
  versionLogback = '1.1.8'
  versionLevelDb = '0.10'
  versionProtobuf = '3.5.1'
  versionSpecs2 = '4.2.0'
}

version = '0.1.0'

repositories {
  mavenCentral()
}

sourceSets.main.scala.srcDirs += 'build/generated/source/proto/main/scala'

dependencies {
  compile group: 'org.scala-lang', name: 'scala-library', version: versionScala
  compile group: 'com.typesafe.akka', name: 'akka-http_2.12', version: versionAkkaHttp
  compile group: 'com.typesafe.akka', name: 'akka-stream_2.12', version: versionAkka
  compile group: 'com.typesafe.akka', name: 'akka-persistence_2.12', version: versionAkka
  compile group: 'org.fusesource.leveldbjni', name: 'leveldbjni-all', version: '1.8'
  compile group: 'com.google.protobuf', name: 'protobuf-java', version: versionProtobuf
  compile group: 'com.thesamet.scalapb', name: 'scalapb-runtime_2.12', version: '0.7.4'
  compile group: 'com.esotericsoftware', name: 'kryo', version: '4.0.2'
  compile group: 'com.github.romix.akka', name: 'akka-kryo-serialization_2.12', version: '0.5.2'
  testCompile group: 'junit', name: 'junit', version: '4.+'
  testCompile group: 'org.scalatest', name: 'scalatest_2.12', version: versionScalaTest
  testCompile group: 'com.typesafe.akka', name: 'akka-testkit_2.12', version: versionAkka
  testCompile group: 'com.typesafe.akka', name: 'akka-http-testkit_2.12', version: versionAkkaHttp
  testCompile group: 'org.specs2', name: 'specs2-core_2.12', version: versionSpecs2
}


task generateProto(type: Exec)  {
  new File("build/generated/source/proto/main/scala").mkdirs()
  workingDir "${projectDir}"
  if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
    commandLine 'cmd', '/c', 'generate_protobuf.bat'
  }
  else {
    commandLine 'sh', 'generate_protobuf.sh'
  }
}


compileScala.dependsOn generateProto


task oneJar (type: OneJar){
  // blocked by https://github.com/rholder/gradle-one-jar/issues/34
  dependsOn compileScala
  mainClass = "orchestration.Orchestration"
  archiveName = "app.jar"
//  archivePath = "$project.buildDir/docker"
}

//def dockerFolder = "$project.buildDir/docker"
//
//// Copy all necessary files to the Docker build-context directory
//task prepareDocker() {
//  copy {
//    from jar
//    into "$dockerFolder"
//    rename { fileName ->
//      fileName.replace(jar, "app.jar")
//    }
//  }
//}
//
//task createDockerfile(type: Dockerfile) {
//  dependsOn prepareDocker
//  destFile = project.file("$dockerFolder/Dockerfile")
//  from 'openjdk:8-jre-alpine'
//  addFile('app.jar', '/')
//  exposePort(9090)
//}
//
//task buildImage(type: DockerBuildImage) {
//  dependsOn createDockerfile
//  inputDir = createDockerfile.destFile.parentFile
//  tag = 'languagepit/orchestration:akka'
//}
