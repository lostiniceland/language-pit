// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package bikes.infrastructure.protobuf

@SerialVersionUID(0L)
final case class ApprovalMessage(
                                  bikeId: _root_.scala.Long = 0L,
                                  approval: bikes.infrastructure.protobuf.ApprovalEnumType = bikes.infrastructure.protobuf.ApprovalEnumType.PENDING
                                ) extends scalapb.GeneratedMessage with scalapb.Message[ApprovalMessage] with scalapb.lenses.Updatable[ApprovalMessage] {
  @transient
  private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0

  private[this] def __computeSerializedValue(): _root_.scala.Int = {
    var __size = 0
    if (bikeId != 0L) {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, bikeId)
    }
    if (approval != bikes.infrastructure.protobuf.ApprovalEnumType.PENDING) {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, approval.value)
    }
    __size
  }

  final override def serializedSize: _root_.scala.Int = {
    var read = __serializedSizeCachedValue
    if (read == 0) {
      read = __computeSerializedValue()
      __serializedSizeCachedValue = read
    }
    read
  }

  def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
    {
      val __v = bikeId
      if (__v != 0L) {
        _output__.writeInt64(1, __v)
      }
    };
    {
      val __v = approval
      if (__v != bikes.infrastructure.protobuf.ApprovalEnumType.PENDING) {
        _output__.writeEnum(2, __v.value)
      }
    };
  }

  def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): bikes.infrastructure.protobuf.ApprovalMessage = {
    var __bikeId = this.bikeId
    var __approval = this.approval
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __bikeId = _input__.readInt64()
        case 16 =>
          __approval = bikes.infrastructure.protobuf.ApprovalEnumType.fromValue(_input__.readEnum())
        case tag => _input__.skipField(tag)
      }
    }
    bikes.infrastructure.protobuf.ApprovalMessage(
      bikeId = __bikeId,
      approval = __approval
    )
  }

  def withBikeId(__v: _root_.scala.Long): ApprovalMessage = copy(bikeId = __v)

  def withApproval(__v: bikes.infrastructure.protobuf.ApprovalEnumType): ApprovalMessage = copy(approval = __v)

  def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => {
        val __t = bikeId
        if (__t != 0L) __t else null
      }
      case 2 => {
        val __t = approval.javaValueDescriptor
        if (__t.getNumber() != 0) __t else null
      }
    }
  }

  def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
    require(__field.containingMessage eq companion.scalaDescriptor)
    (__field.number: @_root_.scala.unchecked) match {
      case 1 => _root_.scalapb.descriptors.PLong(bikeId)
      case 2 => _root_.scalapb.descriptors.PEnum(approval.scalaValueDescriptor)
    }
  }

  def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)

  def companion = bikes.infrastructure.protobuf.ApprovalMessage
}

object ApprovalMessage extends scalapb.GeneratedMessageCompanion[bikes.infrastructure.protobuf.ApprovalMessage] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[bikes.infrastructure.protobuf.ApprovalMessage] = this

  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): bikes.infrastructure.protobuf.ApprovalMessage = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    bikes.infrastructure.protobuf.ApprovalMessage(
      __fieldsMap.getOrElse(__fields.get(0), 0L).asInstanceOf[_root_.scala.Long],
      bikes.infrastructure.protobuf.ApprovalEnumType.fromValue(__fieldsMap.getOrElse(__fields.get(1), bikes.infrastructure.protobuf.ApprovalEnumType.PENDING.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
    )
  }

  implicit def messageReads: _root_.scalapb.descriptors.Reads[bikes.infrastructure.protobuf.ApprovalMessage] = _root_.scalapb.descriptors.Reads {
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      bikes.infrastructure.protobuf.ApprovalMessage(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        bikes.infrastructure.protobuf.ApprovalEnumType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(bikes.infrastructure.protobuf.ApprovalEnumType.PENDING.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }

  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BikesProto.javaDescriptor.getMessageTypes.get(4)

  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BikesProto.scalaDescriptor.messages(4)

  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)

  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty

  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => bikes.infrastructure.protobuf.ApprovalEnumType
    }
  }

  lazy val defaultInstance = bikes.infrastructure.protobuf.ApprovalMessage(
  )

  implicit class ApprovalMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, bikes.infrastructure.protobuf.ApprovalMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, bikes.infrastructure.protobuf.ApprovalMessage](_l) {
    def bikeId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.bikeId)((c_, f_) => c_.copy(bikeId = f_))

    def approval: _root_.scalapb.lenses.Lens[UpperPB, bikes.infrastructure.protobuf.ApprovalEnumType] = field(_.approval)((c_, f_) => c_.copy(approval = f_))
  }

  final val BIKE_ID_FIELD_NUMBER = 1
  final val APPROVAL_FIELD_NUMBER = 2
}
