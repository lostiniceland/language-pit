// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package bikes.infrastructure.protobuf

@SerialVersionUID(0L)
final case class CreateBikeMessage(
                                    manufacturer: _root_.scala.Predef.String = "",
                                    name: _root_.scala.Predef.String = "",
                                    weight: _root_.scala.Float = 0.0f,
                                    value: _root_.scala.Float = 0.0f,
                                    parts: _root_.scala.collection.Seq[bikes.infrastructure.protobuf.PartType] = _root_.scala.collection.Seq.empty
                                  ) extends scalapb.GeneratedMessage with scalapb.Message[CreateBikeMessage] with scalapb.lenses.Updatable[CreateBikeMessage] {
  @transient
  private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0

  private[this] def __computeSerializedValue(): _root_.scala.Int = {
    var __size = 0
    if (manufacturer != "") {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, manufacturer)
    }
    if (name != "") {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, name)
    }
    if (weight != 0.0f) {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(3, weight)
    }
    if (value != 0.0f) {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(4, value)
    }
    parts.foreach(parts => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(parts.serializedSize) + parts.serializedSize)
    __size
  }

  final override def serializedSize: _root_.scala.Int = {
    var read = __serializedSizeCachedValue
    if (read == 0) {
      read = __computeSerializedValue()
      __serializedSizeCachedValue = read
    }
    read
  }

  def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
    {
      val __v = manufacturer
      if (__v != "") {
        _output__.writeString(1, __v)
      }
    };
    {
      val __v = name
      if (__v != "") {
        _output__.writeString(2, __v)
      }
    };
    {
      val __v = weight
      if (__v != 0.0f) {
        _output__.writeFloat(3, __v)
      }
    };
    {
      val __v = value
      if (__v != 0.0f) {
        _output__.writeFloat(4, __v)
      }
    };
    parts.foreach { __v =>
      _output__.writeTag(5, 2)
      _output__.writeUInt32NoTag(__v.serializedSize)
      __v.writeTo(_output__)
    };
  }

  def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): bikes.infrastructure.protobuf.CreateBikeMessage = {
    var __manufacturer = this.manufacturer
    var __name = this.name
    var __weight = this.weight
    var __value = this.value
    val __parts = (_root_.scala.collection.immutable.Vector.newBuilder[bikes.infrastructure.protobuf.PartType] ++= this.parts)
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __manufacturer = _input__.readString()
        case 18 =>
          __name = _input__.readString()
        case 29 =>
          __weight = _input__.readFloat()
        case 37 =>
          __value = _input__.readFloat()
        case 42 =>
          __parts += _root_.scalapb.LiteParser.readMessage(_input__, bikes.infrastructure.protobuf.PartType.defaultInstance)
        case tag => _input__.skipField(tag)
      }
    }
    bikes.infrastructure.protobuf.CreateBikeMessage(
      manufacturer = __manufacturer,
      name = __name,
      weight = __weight,
      value = __value,
      parts = __parts.result()
    )
  }

  def withManufacturer(__v: _root_.scala.Predef.String): CreateBikeMessage = copy(manufacturer = __v)

  def withName(__v: _root_.scala.Predef.String): CreateBikeMessage = copy(name = __v)

  def withWeight(__v: _root_.scala.Float): CreateBikeMessage = copy(weight = __v)

  def withValue(__v: _root_.scala.Float): CreateBikeMessage = copy(value = __v)

  def clearParts = copy(parts = _root_.scala.collection.Seq.empty)

  def addParts(__vs: bikes.infrastructure.protobuf.PartType*): CreateBikeMessage = addAllParts(__vs)

  def addAllParts(__vs: TraversableOnce[bikes.infrastructure.protobuf.PartType]): CreateBikeMessage = copy(parts = parts ++ __vs)

  def withParts(__v: _root_.scala.collection.Seq[bikes.infrastructure.protobuf.PartType]): CreateBikeMessage = copy(parts = __v)

  def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => {
        val __t = manufacturer
        if (__t != "") __t else null
      }
      case 2 => {
        val __t = name
        if (__t != "") __t else null
      }
      case 3 => {
        val __t = weight
        if (__t != 0.0f) __t else null
      }
      case 4 => {
        val __t = value
        if (__t != 0.0f) __t else null
      }
      case 5 => parts
    }
  }

  def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
    require(__field.containingMessage eq companion.scalaDescriptor)
    (__field.number: @_root_.scala.unchecked) match {
      case 1 => _root_.scalapb.descriptors.PString(manufacturer)
      case 2 => _root_.scalapb.descriptors.PString(name)
      case 3 => _root_.scalapb.descriptors.PFloat(weight)
      case 4 => _root_.scalapb.descriptors.PFloat(value)
      case 5 => _root_.scalapb.descriptors.PRepeated(parts.map(_.toPMessage)(_root_.scala.collection.breakOut))
    }
  }

  def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)

  def companion = bikes.infrastructure.protobuf.CreateBikeMessage
}

object CreateBikeMessage extends scalapb.GeneratedMessageCompanion[bikes.infrastructure.protobuf.CreateBikeMessage] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[bikes.infrastructure.protobuf.CreateBikeMessage] = this

  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): bikes.infrastructure.protobuf.CreateBikeMessage = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    bikes.infrastructure.protobuf.CreateBikeMessage(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), 0.0f).asInstanceOf[_root_.scala.Float],
      __fieldsMap.getOrElse(__fields.get(3), 0.0f).asInstanceOf[_root_.scala.Float],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[bikes.infrastructure.protobuf.PartType]]
    )
  }

  implicit def messageReads: _root_.scalapb.descriptors.Reads[bikes.infrastructure.protobuf.CreateBikeMessage] = _root_.scalapb.descriptors.Reads {
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      bikes.infrastructure.protobuf.CreateBikeMessage(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[bikes.infrastructure.protobuf.PartType]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }

  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BikesProto.javaDescriptor.getMessageTypes.get(2)

  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BikesProto.scalaDescriptor.messages(2)

  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = bikes.infrastructure.protobuf.PartType
    }
    __out
  }

  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty

  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)

  lazy val defaultInstance = bikes.infrastructure.protobuf.CreateBikeMessage(
  )

  implicit class CreateBikeMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, bikes.infrastructure.protobuf.CreateBikeMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, bikes.infrastructure.protobuf.CreateBikeMessage](_l) {
    def manufacturer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.manufacturer)((c_, f_) => c_.copy(manufacturer = f_))

    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))

    def weight: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.weight)((c_, f_) => c_.copy(weight = f_))

    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.value)((c_, f_) => c_.copy(value = f_))

    def parts: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[bikes.infrastructure.protobuf.PartType]] = field(_.parts)((c_, f_) => c_.copy(parts = f_))
  }

  final val MANUFACTURER_FIELD_NUMBER = 1
  final val NAME_FIELD_NUMBER = 2
  final val WEIGHT_FIELD_NUMBER = 3
  final val VALUE_FIELD_NUMBER = 4
  final val PARTS_FIELD_NUMBER = 5
}
