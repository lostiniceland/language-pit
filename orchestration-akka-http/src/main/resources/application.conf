akka {
  # default logs to System.out
  loggers = ["akka.event.Logging$DefaultLogger"]
  # Use SLF4J
  #loggers = ["akka.event.slf4j.Slf4jLogger"]
  #logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  # If you set the loglevel to a higher level than "DEBUG",
  # any DEBUG events will be filtered out already at the source and will never reach the logging backend,
  # regardless of how the backend is configured.
  # Akka configured loggers use this level
  # use: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # Akka ActorSystem startup uses this level until configs load;
  # Output to System.out
  stdout-loglevel = "INFO"

  actor {

    # local provider
    provider = "akka.actor.LocalActorRefProvider"

    default-dispatcher {
      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      # Set to 1 for as fair as possible, but also poor throughput
      throutput = 10
    }

    publisher-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"

      thread-pool-executor {
        fixed-pool-size = 16
      }

      throughput = 10
    }

    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "orchestration.Commands$Command" = kryo
    }

    kryo{
      # Possibles values for type are: graph or nograph
      # graph supports serialization of object graphs with shared nodes
      # and cyclic references, but this comes at the expense of a small
      # overhead nograph does not support object grpahs with shared nodes,
      # but is usually faster
      type = "graph"
      idstrategy = "explicit"
      serializer-pool-size = 16
      buffer-size = 4096
      use-manifests = false
      kryo-trace = false
      # if implicit registration kicks in, the class should be registered below
      implicit-registration-logging = true
      # Define mappings from a fully qualified class name to a numeric id.
      # Smaller ids lead to smaller sizes of serialized representations.
      #
      # This section is:
      # - mandatory for idstrategy="explicit"
      # - ignored   for idstrategy="default"
      # - optional  for incremental and automatic
      #
      # The smallest possible id should start at 20 (or even higher), because
      # ids below it are used by Kryo internally e.g. for built-in Java and
      # Scala types
      mappings {
        "orchestration.Commands$BikeCreated" = 30,
        "orchestration.Commands$BikeDeleted" = 31,
        "orchestration.Commands$BikeApproved" = 32,
        "orchestration.Commands$BikeRejected" = 33,
        "orchestration.Commands$EventDelivered" = 34,
        "common.infrastructure.protobuf.events.BikeApprovalCreatedMessage" = 35,
        "common.infrastructure.protobuf.events.BikeApprovedMessage" = 36,
        "common.infrastructure.protobuf.events.BikeCreatedMessage" = 37,
        "common.infrastructure.protobuf.events.BikeDeletedMessage" = 38,
        "common.infrastructure.protobuf.events.BikeRejectedMessage" = 39,
        "common.infrastructure.protobuf.events.EventsEnvelope" = 40,
        "common.infrastructure.protobuf.events.EventsProto" = 41
      }

      # Define a set of fully qualified class names for
      # classes to be used for serialization.
      # The ids for those classes will be assigned automatically,
      # but respecting the order of declaration in this section
      #
      # This section is ignored for idstrategy="default" and optional for
      # all other.
      #classes = [
      # "package3.name3.className3",
      # "package4.name4.className4"
      #]
    }
  }

  persistence {
    journal {
      plugin = "akka.persistence.journal.leveldb"
    }
    snapshot-store {
      plugin = "akka.persistence.snapshot-store.local"
    }
  }
}

extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]