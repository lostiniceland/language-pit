plugins {
  id "groovy"
  id "com.google.protobuf" version "0.8.6"
  id "com.avast.gradle.docker-compose" version "0.8.0"
}


repositories {
  mavenCentral()
}

dependencies {
  compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
  compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.5.1'
  compile group: 'com.googlecode.protobuf-java-format', name: 'protobuf-java-format', version: '1.4'
  compile group: 'org.apache.kafka', name: 'kafka-clients', version: '2.0.0'
  compile 'org.spockframework:spock-core:1.1-groovy-2.4'
  compile 'org.codehaus.groovy:groovy-all:2.4.+'
  testCompile group: 'junit', name: 'junit', version: '4.+'
  // Groovy RESTClient
  compile group: 'org.codehaus.groovy.modules.http-builder', name: 'http-builder', version: '0.7.1'
  //compile group: 'oauth.signpost', name: 'signpost-core', version: '1.2.1.2'
  //compile group: 'oauth.signpost', name: 'signpost-commonshttp', version: '1.2.1.2'
}

configurations {
  itestCompile.extendsFrom testCompile
  itestRuntime.extendsFrom testRuntime
}

sourceSets {
  itest {
    compileClasspath += main.output + test.output
    runtimeClasspath += main.output + test.output

    groovy.srcDir file('src/itest/groovy')
    resources.srcDir file('src/itest/resources')
  }
}

task integrationTest(type: Test){
  outputs.upToDateWhen {false}
  group 'verification'
  description 'Run integration tests using Docker images'
  testClassesDirs = sourceSets.itest.output.classesDirs
  classpath = sourceSets.itest.runtimeClasspath
  systemProperty('SERVICE_HOST', '10.0.75.1') // adjust when running on non-native Docker host
  systemProperty('KAFKA_HOST', '10.0.75.1')
  testLogging {
    events "passed", "skipped", "failed"
  }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

sourceSets.main.java.srcDirs += 'build/generated/source/proto/main/java'

compileJava.dependsOn 'generateProto'

protobuf {
  // Configure the protoc executable
  protoc {
    // Download from repositories
    artifact = 'com.google.protobuf:protoc:3.5.1'
  }
}

dockerCompose {
  // hooks 'dependsOn composeUp' and 'finalizedBy composeDown', and exposes environment variables and system properties (if possible)
  isRequiredBy(project.tasks.integrationTest)
  dockerComposeWorkingDirectory '../docker-compose'
  projectName 'testing' // use dedicated name in case another compose is running
  useComposeFiles = ['javaee-akka.yml']
  forceRecreate = true
}
